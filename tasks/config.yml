---

- name: Define custom settings
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/tower/conf.d/{{ item }}
    owner: awx
    group: awx
    mode: "0640"
  loop:
    - db.py
    - olam.py

- name: Podman system migrate
  ansible.builtin.command:
    cmd: podman system migrate
  become: yes
  become_user: awx
  changed_when: false
  tags: molecule-notest

- name: Pull an image
  containers.podman.podman_image:
    name: container-registry.oracle.com/oracle_linux_automation_manager/olam-ee
  become: yes
  become_user: awx
  tags: molecule-notest

- name: Create receptor configuration from template
  ansible.builtin.template:
    src: receptor.conf.j2
    dest: /etc/receptor/receptor.conf
    owner: root
    group: root
    mode: "0644"

- name: Perform AWX migration
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-migrate.log
    awx-manage migrate > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-migrate.log"
  become: yes
  become_user: awx

- name: Create admin user
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-createsuperuser.log
    awx-manage createsuperuser --username {{ olam_admin_username }} --email {{ olam_admin_email }} --noinput > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-createsuperuser.log"
  become: yes
  become_user: awx

- name: Install pexect
  ansible.builtin.package:
    name: python3-pexpect
    state: present

- name: Set admin password
  ansible.builtin.expect:
    command: awx-manage changepassword {{ olam_admin_username }}
    responses:
      (?i)password: "{{ olam_admin_password }}"
  no_log: true
  become: yes
  become_user: awx
  tags: molecule-idempotence-notest

- name: Preload demo data
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-create_preload_data.log
    awx-manage create_preload_data > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-create_preload_data.log"
  become: yes
  become_user: awx
  when: olam_demo_data | bool

- name: Provision instance  # noqa no-free-form
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-provision_instance.log
    awx-manage provision_instance --hostname={{ olam_service_ip }} > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-provision_instance.log"
  become: yes
  become_user: awx

- name: Register default execution_environments  # noqa no-free-form
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-register_execution_environments.log
    awx-manage register_default_execution_environments > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-register_execution_environments.log"
  become: yes
  become_user: awx

- name: Register queue 'default'  # noqa no-free-form
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-register-queue-default.log
    awx-manage register_queue --queuename=default --hostnames={{ olam_service_ip }} > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-register-queue-default.log"
  become: yes
  become_user: awx

- name: Register queue 'controlplane'  # noqa no-free-form
  ansible.builtin.shell: |
    log={{ olam_log_dir }}/awx-manage-register-queue-controlplane.log
    awx-manage register_queue --queuename=controlplane --hostnames={{ olam_service_ip }} > ${log}.tmp 2>&1 && \
    mv ${log}.tmp ${log}
  args:
    creates: "{{ olam_log_dir }}/awx-manage-register-queue-controlplane.log"
  become: yes
  become_user: awx

# - name: Update AWX settings
#   ansible.builtin.lineinfile:
#     path: /etc/tower/settings.py
#     regexp: "{{ item.key }} = .*"
#     line: "{{ item.key }} = \"{{ item.value }}\""
#   loop: "{{ olam_settings | dict2items }}"

- name: Copy SSL key
  ansible.builtin.copy:
    src: "{{ olam_ssl_key }}"
    dest: /etc/tower/tower.key
    remote_src: "{{ olam_ssl_remote_src | default(False) }}"
    mode: "0600"
  become: yes

- name: Copy SSL certificate
  ansible.builtin.copy:
    src: "{{ olam_ssl_certificate }}"
    dest: /etc/tower/tower.crt
    remote_src: "{{ olam_ssl_remote_src | default(False) }}"
    mode: "0644"
  become: yes

- name: Update nginx
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    mode: "0644"
  notify: Restart nginx

- name: Disable IPv6
  ansible.builtin.replace:
    path: /etc/nginx/conf.d/ol-automation-manager-nginx.conf
    regexp: '^(\s +)(listen \[)'
    replace: '#\1\2'
  notify: Restart nginx
  when: olam_disable_ipv6 | bool

- name: Start the OLAM service
  ansible.builtin.service:
    name: ol-automation-manager
    enabled: yes
    state: started

# - name: Make postgresql reachable from external source
#   community.postgresql.postgresql_query:
#     db: "{{ olam_db_name }}"
#     query: ALTER USER {{ olam_db_user }} WITH PASSWORD '{{ olam_db_password }}';
#   become: yes
#   become_user: postgres
#   when: olam_db_external | bool
#   tags: molecule-idempotence-notest
